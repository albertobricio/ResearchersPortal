<?php

/**
 * @file
 * Module hooks.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_entity_operation().
 */
function bibcite_entity_entity_operation(EntityInterface $entity) {
  $operations = [];

  if ($entity->hasLinkTemplate('bibcite-merge-form')) {
    $operations['bibcite_merge'] = [
      'title' => t('Merge'),
      'weight' => 10,
      'url' => $entity->toUrl('bibcite-merge-form'),
    ];
  }

  return $operations;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Destination query element break redirect between forms.
 */
function bibcite_entity_preprocess_links__dropbutton__operations(&$variables) {
  if (isset($variables['links']['bibcite_merge']['link']['#options']['query']['destination'])) {
    unset($variables['links']['bibcite_merge']['link']['#options']['query']['destination']);
  }
}

/**
 * Implements hook_theme().
 */
function bibcite_entity_theme($existing, $type, $theme, $path) {
  return [
    'bibcite_reference_table' => [
      'render element' => 'elements',
    ],
    'bibcite_contributor' => [
      'render element' => 'elements',
    ],
    'bibcite_keyword' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bibcite_entity_preprocess_bibcite_reference_table(&$variables) {
  $variables['content'] = [
    '#type' => 'container',
    'table' => [
      '#type' => 'table',
    ],
    'links' => [
      '#theme' => 'item_list',
      '#attributes' => [
        'class' => ['inline'],
      ],
      '#items' => [],
    ],
  ];

  foreach (Element::children($variables['elements']) as $key) {
    if (Element::children($variables['elements'][$key])) {
      $title = $variables['elements'][$key]['#title'];
      $variables['elements'][$key]['#title'] = '';
      $variables['content']['table'][] = [
        'title' => [
          '#markup' => $title,
        ],
        'element' => $variables['elements'][$key],
      ];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bibcite_entity_preprocess_bibcite_contributor(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bibcite_entity_preprocess_bibcite_keyword(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function bibcite_entity_entity_extra_field_info() {
  $extra = [];

  $storage = \Drupal::entityTypeManager()->getStorage('bibcite_reference_type');
  foreach ($storage->loadMultiple() as $bundle) {
    $extra['bibcite_reference'][$bundle->id()]['display']['citation'] = [
      'label' => t('Citation'),
      'description' => t('Reference rendered as citation'),
      'weight' => 100,
    ];
  }

  return $extra;
}

/**
 * Implements hook_form_bibcite_reference_form_alter().
 *
 * Override reference entity fields attributes and regroups them.
 */
function bibcite_entity_form_bibcite_reference_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\Core\Entity\EntityForm $form_object */
  $form_object = $form_state->getFormObject();
  $entity = $form_object->getEntity();

  $override_provider = \Drupal::service('bibcite.ui_override_provider');
  $override_provider->referenceFormFieldsOverride($form, $entity->bundle());
  $override_provider->referenceFormTabsRestructure($form);
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 *
 * Override fields attributes and regroup them to details.
 */
function bibcite_entity_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  $override_provider = \Drupal::service('bibcite.ui_override_provider');
  $override_provider->referenceFormFieldsOverride($entity_form, $entity_form['#bundle']);
  $override_provider->referenceFormFieldsetRestructure($entity_form);
}

/**
 * Implements hook_entity_view_alter().
 *
 * Override fields titles.
 */
function bibcite_entity_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->getEntityTypeId() == 'bibcite_reference') {
    $override_provider = \Drupal::service('bibcite.ui_override_provider');
    $override_provider->referenceViewFieldsOverride($build, $entity->bundle());
  }
}

/**
 * Implements hook_form_entity_view_display_edit_form_alter().
 *
 * Override fields titles.
 */
function bibcite_entity_form_entity_view_display_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#entity_type'] == 'bibcite_reference') {
    $bundle_id = $form['#bundle'];

    $override_provider = \Drupal::service('bibcite.ui_override_provider');
    $override_provider->referenceDisplayFormFieldsOverride($form, $bundle_id);
  }
}

/**
 * Implements hook_form_entity_form_display_edit_form_alter().
 *
 * Override fields titles.
 */
function bibcite_entity_form_entity_form_display_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#entity_type'] == 'bibcite_reference') {
    $bundle_id = $form['#bundle'];

    $overrider = \Drupal::service('bibcite.ui_override_provider');
    $overrider->referenceDisplayFormFieldsOverride($form, $bundle_id);
  }
}

/**
 * Implements hook_modules_installed().
 *
 * Clear bundles cache after module is installed.
 * For some reason bundles does not cached after module installation.
 *
 * @todo Find what is caused this issue
 */
function bibcite_entity_modules_installed($modules) {
  if (in_array('bibcite_entity', $modules)) {
    \Drupal::service('entity_type.bundle.info')->clearCachedBundles();
  }
}
